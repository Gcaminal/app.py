import random
import string
import datetime
import requests
import pandas as pd

# ===========================================================================
# 1) CONFIGURACIÓN: Ajusta a tu Base de Airtable
# ===========================================================================
BASE_ID = "appIEZptaG5k4Auvh"   
COMANDA_TABLE = "tblydBjfNU9RNCVEl"
DETALL_TABLE  = "tbllukBPzzo83xCe3"
INVENTARI_TABLE = "tbl4zHZASfatnnCNr"
CLIENT_TABLE = "tblpi3BYithjP2wI5"

AIRTABLE_PAT = "patDfe6ImZED5kfAE.efc27c8fe110443953d082a7e16aae214abbde770d3574c4fdf71d3cc10024ce"  # tu token completo
HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_PAT}",
    "Content-Type": "application/json"
}

def create_airtable_record(url_base, fields_dict):
    """Crea 1 registro en la tabla de Airtable usando un POST, devolviendo record_id o None."""
    payload = {
        "records": [
            {"fields": fields_dict}
        ]
    }
    resp = requests.post(url_base, headers=HEADERS, json=payload)
    if resp.status_code in (200, 201):
        data = resp.json()
        rec_id = data["records"][0]["id"]
        return rec_id
    else:
        print(f"[ERROR] {resp.status_code}: {resp.text}")
        return None

# ===========================================================================
# 2) CREAR CLIENTES CON ID SECUENCIAL (CUST001, CUST002...)
# ===========================================================================
def create_sequential_clients(start_num=1, end_num=5):
    """
    Crea clientes con CustomerID = CUST001, CUST002, ... hasta CUST00(end_num).
    Devuelve un dict {recID: CUSTxxx}.
    """
    client_base_url = f"https://api.airtable.com/v0/{BASE_ID}/{CLIENT_TABLE}"
    recid_to_customerid = {}

    for i in range(start_num, end_num+1):
        cust_id = f"CUST{i:03d}"  # CUST001, CUST002...
        # Generar un nombre y email semialeatorios
        name = "Cliente_" + ''.join(random.choices(string.ascii_uppercase, k=4))
        email = name.lower() + "@example.com"

        phone = f"{random.randint(100,999)}-{random.randint(100,999)}-{random.randint(1000,9999)}"

        # Ejemplo de address aleatorio
        address = f"Calle {random.randint(1,99)}, CiudadX"

        # Ejemplo de fecha de registro (podemos ponerle cosas aleatorias)
        registration_date = datetime.date(2024, random.randint(1, 12), random.randint(1, 28)).isoformat()

        fields = {
            "CustomerID": cust_id,
            "Name": name,
            "Email": email,
            "Phone": phone,
            "Address": address,
            "Registration Date": registration_date
        }

        rec_id = create_airtable_record(client_base_url, fields)
        if rec_id:
            recid_to_customerid[rec_id] = cust_id
    
    return recid_to_customerid

# ===========================================================================
# 3) CREAR PRODUCTOS CON ID SECUENCIAL (PROD001, PROD002...) Y NOMBRE (A,B..)
# ===========================================================================
def create_sequential_products(start_num=1, end_num=6):
    """
    Crea productos con ProductID=PROD001, PROD002... y ProductName="Producte A", "Producte B"...
    Devuelve un dict {recID: ProductID}.
    """
    inventari_base_url = f"https://api.airtable.com/v0/{BASE_ID}/{INVENTARI_TABLE}"
    recid_to_productid = {}

    for i in range(start_num, end_num+1):
        prod_id = f"PROD{i:03d}"   # PROD001, PROD002
        # Nombre alfabético: i=1 => 'A', i=2 => 'B'
        product_name = f"Producte {chr(64 + i)}"  # chr(65)='A'

        stock_init = random.randint(0, 20)  # Stock inicial

        fields = {
            "ProductID": prod_id,
            "ProductName": product_name,
            "Stock": stock_init
        }

        rec_id = create_airtable_record(inventari_base_url, fields)
        if rec_id:
            recid_to_productid[rec_id] = prod_id
    
    return recid_to_productid

# ===========================================================================
# 4) CREAR COMANDAS SIEMPRE PENDING + FECHA ALEATORIA (2024)
# ===========================================================================
def create_random_comandes(num_comandes=10, client_dict=None):
    """
    Crea 'num_comandes' registros en la tabla Comanda, con:
      - Status="Pending"
      - Fecha aleatoria en 2024 (campo "Data")
      - Enlaza a un cliente aleatorio
    Devuelve [(recID_comanda, fecha)] para luego crear Detalles.
    """
    if client_dict is None:
        client_dict = {}
    comanda_base_url = f"https://api.airtable.com/v0/{BASE_ID}/{COMANDA_TABLE}"
    comandes_info = []

    # Rango de fechas en 2024
    start_date = datetime.date(2024, 1, 1)
    end_date   = datetime.date(2024, 12, 31)
    total_days = (end_date - start_date).days + 1

    client_ids = list(client_dict.keys())

    for _ in range(num_comandes):
        rand_offset = random.randint(0, total_days-1)
        fecha = start_date + datetime.timedelta(days=rand_offset)
        date_str = fecha.isoformat()

        # Link a cliente aleatorio
        if client_ids:
            random_client = random.choice(client_ids)
            customer_link = [random_client]  # array con la record_id
        else:
            customer_link = []

        # ALWAYS "Pending"
        fields = {
            "Status": "Pending",
            "Data": date_str,          # <- Asegúrate "Data" en Comanda es un campo Date editable
            "CustomerID": customer_link
        }
        rec_id = create_airtable_record(comanda_base_url, fields)
        if rec_id:
            comandes_info.append((rec_id, fecha))
    
    return comandes_info

# ===========================================================================
# 5) CREAR DETALLE COMANDA, COPIANDO "Data" DE LA COMANDA
# ===========================================================================
def create_detalls(comandes_info, product_dict, max_detalls_per_comanda=3):
    """
    Para cada comanda, creamos 1..max_detalls_per_comanda filas en Detall comanda,
    - "Comanda": [recID_comanda]
    - "ProductID": [recID_producto]
    - "Quantity": aleatorio
    - "Data": mismo date_str que la comanda (si "Data" en Detall comanda es editable)
    """
    detall_base_url = f"https://api.airtable.com/v0/{BASE_ID}/{DETALL_TABLE}"
    product_ids = list(product_dict.keys())

    for (comanda_rec_id, fecha_comanda) in comandes_info:
        # 1..3 líneas
        num_lines = random.randint(1, max_detalls_per_comanda)
        date_str = fecha_comanda.isoformat()

        for _ in range(num_lines):
            if product_ids:
                chosen_prod = random.choice(product_ids)
            else:
                chosen_prod = None

            qty = random.randint(1, 10)

            # Si "Data" en Detall comanda es editable, puedes mandarlo:
            #    "Data": date_str
            fields = {
                "Comanda": [comanda_rec_id],
                "ProductID": [chosen_prod] if chosen_prod else [],
                "Quantity": qty,
                "Data": date_str   # Comenta esta línea si "Data" en Detall comanda NO es editable
            }
            _ = create_airtable_record(detall_base_url, fields)

# ===========================================================================
# 6) FUNCIÓN PRINCIPAL
# ===========================================================================
def main():
    # --- 1) Crear clientes secuenciales (CUST001..CUST005)
    client_dict = create_sequential_clients(start_num=1, end_num=5)
    print("Clientes creados:", client_dict)

    # --- 2) Crear productos secuenciales (PROD001..PROD006)
    product_dict = create_sequential_products(start_num=1, end_num=6)
    print("Productos creados:", product_dict)

    # --- 3) Crear comandes con Status Pending
    comandes_info = create_random_comandes(num_comandes=10, client_dict=client_dict)
    print("Comandes creadas:", comandes_info)

    # --- 4) Crear detalles, con la misma fecha que la comanda
    create_detalls(comandes_info, product_dict, max_detalls_per_comanda=3)
    print("Detalles de comanda creados con éxito!")

if __name__ == "__main__":
    main()
